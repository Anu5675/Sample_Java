apply plugin: 'java'

buildscript {
    dependencies {
        classpath files('../btrace-compiler/build/classes/main/java')
    }
}

sourceSets {
    java11_dummy {
        java {
            srcDirs = ['src/main/java11_dummy']
        }
    }
    test_extension {
        java {
            srcDirs = ['src/test/extension']
        }
    }
}

dependencies {
    compile(group: 'org.ow2.asm', name: 'asm', version: "${rootProject.asmVersion}")
    compile(group: 'org.ow2.asm', name: 'asm-tree', version: "${rootProject.asmVersion}")
    compile group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc7'
    compile project(':btrace-core')
    compile project(':btrace-runtime')
    compile project(':btrace-compiler')
    compile project(':btrace-statsd')
    testCompile project(':btrace-client')
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.mockito:mockito-inline:3.8.0'

    test_extensionCompile project(':btrace-client')
}

compileJava11_dummyJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_11_HOME")}/bin/javac"
    options.forkOptions.javaHome = file("${project.property("JAVA_11_HOME")}")
}

compileTestJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_8_HOME")}/bin/javac"
}

task buildEventsJar(type: Jar) {
    inputs.files compileJava11_dummyJava
    from files("${project.buildDir}/classes/java/java11_dummy")
    archiveBaseName = "events"
    archiveVersion = ""
    archiveClassifier = ""
}

def testBTraceLibs = "${project.rootDir}/btrace-dist/build/resources/main/v${project.version}/libs"
def extensionDir = "${testBTraceLibs}/ext"

task buildTestExtensionJar(type: Jar) {
    inputs.files compileTest_extensionJava
    from files("${project.buildDir}/classes/java/test_extension")
    archiveBaseName = "extension"
    destinationDirectory = file(extensionDir)

    manifest {
        attributes(
                "BTrace-Extension-ID": "one",
                "BTrace-Extension-Version": "1.0",
                "BTrace-Extension-Exports": "io.btrace.extensions.one"
        )
    }
}

task compileTestProbes {
    dependsOn compileTestJava, compileJava11_dummyJava, buildTestExtensionJar
    doLast {
        def path = project(':btrace-instr').sourceSets.test_extension.runtimeClasspath

        def loader = new URLClassLoader(path.collect { f -> f.toURL() } as URL[])
        def compiler = loader.loadClass('org.openjdk.btrace.compiler.Compiler')
        def rtCp = sourceSets.test_extension.runtimeClasspath.collect { it.absolutePath }.join(':')

        def args = ["-cp", "${buildDir}/classes/java/test:${buildDir}/classes/java/java11_dummy:${rtCp}", "-d", "${buildDir}/classes"]

        def files = fileTree(dir: "src/test/btrace", include: '**/*.java', exclude: 'verifier/**/*.java').findAll {
            it != null
        }.collect { it }

        args.addAll(files)
        System.setProperty("btrace.extensions.dir", extensionDir)
        compiler.main(args as String[])
    }
}

test {
    onlyIf {
        new File("${testBTraceLibs}/btrace-client.jar").exists()
    }
    dependsOn cleanTest, buildEventsJar, buildTestExtensionJar
    inputs.files compileTestProbes.outputs
    //inputs.files buildDTrace.outputs
    testLogging.showStandardStreams = true

    jvmArgs "-Dbtrace.test.libs=${testBTraceLibs}", '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED', '--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED', "-Dproject.version=${project.version}"
}